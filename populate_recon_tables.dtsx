<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/24/2024 9:41:30 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="UKWWHDSQLWI099"
  DTS:CreatorName="UK\PAM-WMS-Migration"
  DTS:DTSID="{A369D480-AC2D-41DD-B7C6-924C09FA6B75}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5270.0"
  DTS:LocaleID="2057"
  DTS:ObjectName="Package1"
  DTS:PackageType="5"
  DTS:VersionBuild="19"
  DTS:VersionGUID="{96A7A5C3-17D9-40B0-91D9-001B138C77D1}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Populate inventory recon tables"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{07DD3364-FBBE-4603-B463-9394F5FFC22C}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Populate inventory recon tables">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Populate inventory recon tables\Populate Inventory Recon Tables"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{77981BE5-84D7-42FC-93C8-C6D90EDF2460}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Populate Inventory Recon Tables"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{DA29E0B6-8531-4EA2-A25E-66DEA44DD2EE}"
              SQLTask:SqlStatementSource="--all successfully migrated inventory records&#xA;USE DM_MoC_NP3&#xA;GO&#xA;DROP TABLE IF EXISTS ReconDB.dbo.reconcile_inventory_attributes;&#xA;GO&#xA;SELECT *&#xA;  INTO ReconDB.dbo.reconcile_inventory_attributes&#xA;  FROM (&#xA;SELECT ilv.*&#xA;,CASE WHEN ItemNumber_Match = 1 AND UnitsPerCase_Match = 1 AND InventoryStatus_Match = 1 AND UnitQuantity_Match = 1 AND DestinationLocation_Match = 1 AND &#xA;           LPN_Match = 1 AND FootprintCode_Match = 1 AND FIFODate_Match = 1 THEN 'Passed' ELSE 'Failed' END AS inventory_attributes_match_result&#xA;  FROM (&#xA;SELECT dim.*&#xA;     , CASE WHEN dim.[ISBN_SuppEd] = dim.[Item Number] THEN 1 ELSE 0 END AS ItemNumber_Match&#xA;&#x9; , CASE WHEN dim.[PackSize] = dim.[Units Per Case] THEN 1 ELSE 0 END AS UnitsPerCase_Match&#xA;&#x9; , CASE WHEN dim.[InventoryStatus] = dim.[Inventory Status] THEN 1 ELSE 0 END AS InventoryStatus_Match&#xA;&#x9; , CASE WHEN dim.[UnitQty] = dim.[Unit Quantity] THEN 1 ELSE 0 END AS UnitQuantity_Match&#xA;&#x9; , CASE WHEN dim.[DestinationLocation] = dim.[Destination Location] THEN 1 ELSE 0 END AS DestinationLocation_Match&#xA;&#x9; , CASE WHEN dim.[BaseLuId] IS NOT NULL AND dim.BaseLuId = dim.[LPN] THEN 1 &#xA;&#x9;        WHEN dim.[BaseLuId] IS NULL OR dim.[BaseLuId] = '' THEN 1&#xA;&#x9;        ELSE 0 END AS LPN_Match&#xA;&#x9; , CASE WHEN dim.[ISBN] = dim.[Footprint Code] THEN 1 ELSE 0 END AS FootprintCode_Match&#xA;&#x9; , CASE WHEN (dim.[ReceivedDate] &lt;&gt; '' AND dim.[ReceivedDate] = dim.[FIFO Date]) OR &#xA;&#x9;             (dim.[ReceivedDate] = '' AND dim.[FIFO Date] &lt;&gt; '')&#xA;&#x9;        THEN 1 ELSE 0 END AS FIFODate_Match&#xA;  FROM (&#xA;SELECT inv.[run_id]&#xA;      ,inv.[Site]&#xA;      ,inv.[Placement]&#xA;      ,inv.[Location] AS DestinationLocation&#xA;      ,inv.[ISBN_SuppEd]&#xA;      ,inv.[ReceivedDate] AS orig_receiveddate &#xA;&#x9;  ,CASE WHEN REPLACE(CONVERT(VARCHAR,CONVERT(DATE,inv.[ReceivedDate], 20),112) ,'19000101','') &lt;&gt; '' THEN REPLACE(CONVERT(VARCHAR,CONVERT(DATE,inv.[ReceivedDate], 20),112) ,'19000101','') + '000000' ELSE '' END AS ReceivedDate&#xA;      ,inv.[No-of-Units-1]&#xA;      ,inv.[No-of-Units-2]&#xA;&#x9;  ,CAST(inv.[No-of-Units-1] AS INTEGER) + CAST(inv.[No-of-Units-2] AS INTEGER) AS UnitQty&#xA;      ,inv.[Frozen-Code-1]&#xA;      ,inv.[Frozen-Code-2]&#xA;&#x9;  ,CASE WHEN inv.[Frozen-Code-2] = '' THEN 'A' ELSE inv.[Frozen-Code-2] END AS InventoryStatus&#xA;      --,inv.[No-of-Units-3]&#xA;      --,inv.[Frozen-Code-3]&#xA;      --,inv.[No-of-Units-4]&#xA;      --,inv.[Frozen-Code-4]&#xA;      --,inv.[No-of-Units-5]&#xA;      --,inv.[Frozen-Code-5]&#xA;      --,inv.[No-of-Units-6]&#xA;      --,inv.[Frozen-Code-6]&#xA;      --,inv.[by_payload_filler]&#xA;      --,inv.[resultant_payload]&#xA;      ,inv.[PackSize] AS orig_packsize&#xA;      ,CASE WHEN inv.[PackSize] = 0 THEN 1 ELSE inv.[PackSize] END AS PackSize&#xA;      ,inv.[ISBN]&#xA;      --,inv.[SupplyEd]&#xA;      --,inv.[LocationType]&#xA;      --,inv.[BookWeight]&#xA;      --,inv.[ID]&#xA;      --,inv.[RecSta]&#xA;      --,inv.[SegNumber]&#xA;      --,inv.[LuPerSegment]&#xA;      --,inv.[LuInSegment]&#xA;      --,inv.[LuAwaitIn]&#xA;      --,inv.[SegLuType]&#xA;      --,inv.[SegmentStatus]&#xA;      --,inv.[ImpressionNo]&#xA;      --,inv.[BindOrderNo]&#xA;      --,inv.[DeliveryNo]&#xA;      --,inv.[ProductPrice]&#xA;      --,inv.[UnitSize]&#xA;      --,inv.[UnitWeight]&#xA;      --,inv.[BaseDimLong]&#xA;      --,inv.[BaseDimShort]&#xA;      --,inv.[UnitDimHigh]&#xA;      --,inv.[UnitsAwIn1A]&#xA;      --,inv.[UnitsAwIn2A]&#xA;      --,inv.[UnitsAwIn3A]&#xA;      --,inv.[UnitsAwOut1A]&#xA;      --,inv.[UnitsAwOut2A]&#xA;      --,inv.[UnitsAwOut3A]&#xA;      --,inv.[UnitsAwIn1B]&#xA;      --,inv.[UnitsAwIn2B]&#xA;      --,inv.[UnitsAwIn3B]&#xA;      --,inv.[UnitsAwOut1B]&#xA;      --,inv.[UnitsAwOut2B]&#xA;      --,inv.[UnitsAwOut3B]&#xA;      --,inv.[UnitsAwIn1C]&#xA;      --,inv.[UnitsAwIn2C]&#xA;      --,inv.[UnitsAwIn3C]&#xA;      --,inv.[UnitsAwOut1C]&#xA;      --,inv.[UnitsAwOut2C]&#xA;      --,inv.[UnitsAwOut3C]&#xA;      --,inv.[UnitsAwIn1D]&#xA;      --,inv.[UnitsAwIn2D]&#xA;      --,inv.[UnitsAwIn3D]&#xA;      --,inv.[UnitsAwOut1D]&#xA;      --,inv.[UnitsAwOut2D]&#xA;      --,inv.[UnitsAwOut3D]&#xA;      --,inv.[UnitsAwIn1E]&#xA;      --,inv.[UnitsAwIn2E]&#xA;      --,inv.[UnitsAwIn3E]&#xA;      --,inv.[UnitsAwOut1E]&#xA;      --,inv.[UnitsAwOut2E]&#xA;      --,inv.[UnitsAwOut3E]&#xA;      --,inv.[UnitsAwIn1F]&#xA;      --,inv.[UnitsAwIn2F]&#xA;      --,inv.[UnitsAwIn3F]&#xA;      --,inv.[UnitsAwOut1F]&#xA;      --,inv.[UnitsAwOut2F]&#xA;      --,inv.[UnitsAwOut3F]&#xA;      --,inv.[OpenedDate]&#xA;      --,inv.[NoOfAccesses]&#xA;      --,inv.[LastTransferDate]&#xA;      --,inv.[LastTransferQty]&#xA;      --,inv.[CiCountIn]&#xA;      --,inv.[CiCountOut]&#xA;      --,inv.[CiCountDate]&#xA;      --,inv.[CiCountTotal]&#xA;      --,inv.[CiCountAdjust]&#xA;      --,inv.[PiCountIn]&#xA;      --,inv.[PiCountOut]&#xA;      --,inv.[PiCountDate]&#xA;      --,inv.[PiCountTotal]&#xA;      --,inv.[PiCountAdjust]&#xA;      --,inv.[GbsManifest]&#xA;      --,inv.[GbsSpare]&#xA;      --,inv.[HoldUnitSize]&#xA;      --,inv.[HoldUnitWeight]&#xA;      --,inv.[HoldDimLong]&#xA;      --,inv.[HoldDimShort]&#xA;      --,inv.[HoldDimHigh]&#xA;      --,inv.[FullPalletExtr]&#xA;      --,inv.[PiCountRequested]&#xA;      --,inv.[PiCountQcCheck]&#xA;      --,inv.[FreeLocnFlag]&#xA;      --,inv.[TransferDate]&#xA;      --,inv.[MiscSpare]&#xA;      --,inv.[CumulativeAccesses]&#xA;      --,inv.[PiGeneratedDate]&#xA;      --,inv.[Shippable]&#xA;      --,inv.[InProgress]&#xA;      --,inv.[PickAccessSta]&#xA;      --,inv.[ReplAccessSta]&#xA;      --,inv.[ReleaseWhenEmpty]&#xA;      --,inv.[BindPickPackExcl]&#xA;      --,inv.[main_tag_starter]&#xA;      --,inv.[main_tag_finisher]&#xA;      --,inv.[BaseLuType]&#xA;      ,inv.[BaseLuId]&#xA;      ,ldsm.[Item Number]&#xA;      ,ldsm.[Units Per Case]&#xA;      ,ldsm.[Inventory Status]&#xA;      ,ldsm.[Unit Quantity]&#xA;      ,ldsm.[Destination Location]&#xA;      ,ldsm.[LPN]&#xA;      ,ldsm.[Footprint Code]&#xA;      ,ldsm.[FIFO Date]&#xA;      ,ldsm.[errors]&#xA;      ,ldsm.[Event Status]&#xA;      ,ldsm.[Download Sequence]&#xA;      ,ldsm.[Last Updated Date]&#xA;      ,ldsm.[event_lodnum]&#xA;     --, CASE WHEN ldsm.[Event Status] = 'Event Sent' THEN 'SUCCESS' ELSE 'ERROR' END AS bydata_load_status&#xA;  FROM [transform].[inventory_load_results] ldsm&#xA;  JOIN [final].[inventories] inv ON ldsm.[Item Number] = inv.ISBN_SuppEd AND ldsm.[Destination Location] = inv.Location --AND ldsm.LPN = ISNULL(inv.BaseLuId, ldsm.LPN)&#xA; --WHERE ldsm.[Download Sequence] = 109727&#xA; WHERE ldsm.dwnld_info LIKE '%inventory_data_payloads%'&#xA; ) dim&#xA; ) ilv) rs --ORDER BY 39;&#xA;GO&#xA;--Inventory records by Migration Status&#xA;DROP TABLE IF EXISTS ReconDB.dbo.inventory_by_migration_status;&#xA;GO&#xA;SELECT * INTO ReconDB.dbo.inventory_by_migration_status&#xA;  FROM (&#xA;SELECT ilv.*&#xA;      ,CASE WHEN record_count = 1 THEN 'N' &#xA;&#x9;        WHEN record_count &gt; 1 AND record_count &lt;= 10 THEN 'Y'&#xA;&#x9;&#x9;&#x9;ELSE 'N/A'&#xA;&#x9;&#x9;&#x9; END AS is_duplicated&#xA;  FROM (&#xA; SELECT COUNT(1) AS record_count, ldsm.[Item Number], ldsm.[Destination Location], ldsm.[Footprint Code], ldsm.[Inventory Status], ldsm.LPN, 'successful' AS migrated_status&#xA;   FROM [transform].[inventory_load_results] ldsm WHERE ldsm.dwnld_info LIKE '%inventory_data_payloads%' and ldsm.errors = ''&#xA;  GROUP BY ldsm.[Item Number], ldsm.[Destination Location], ldsm.[Footprint Code], ldsm.[Inventory Status], ldsm.LPN&#xA;  --having count(1) &gt; 1 or count(1) &gt; 20000&#xA;UNION&#xA; SELECT COUNT(1) AS record_count, ldsm.[Item Number], ldsm.[Destination Location], ldsm.[Footprint Code], ldsm.[Inventory Status], ldsm.LPN, 'errors' AS migrated_status&#xA;   FROM [transform].[inventory_load_results] ldsm WHERE ldsm.dwnld_info LIKE '%inventory_data_payloads%' and ldsm.errors &lt;&gt; ''&#xA;  GROUP BY ldsm.[Item Number], ldsm.[Destination Location], ldsm.[Footprint Code], ldsm.[Inventory Status], ldsm.LPN&#xA; -- having count(1) &gt; 1 or count(1) &gt; 20000&#xA; ) ilv) rs;&#xA; GO&#xA;--Errored out Inventory records during load&#xA;DROP TABLE IF EXISTS ReconDB.dbo.inventory_dm_load_errors;&#xA;GO&#xA;SELECT * INTO ReconDB.dbo.inventory_dm_load_errors&#xA;  FROM (&#xA;SELECT CASE WHEN ldsm.errors like 'Only one parent%' THEN 'Location not setup in BY' &#xA;            WHEN ldsm.errors like 'Current system configuration%' THEN 'Config Related'&#xA;&#x9;&#x9;&#x9;WHEN ldsm.errors like 'LPN already%' THEN 'Duplicate LPN related'&#xA;&#x9;&#x9;&#x9;WHEN ldsm.errors like 'Negative numbers not allowed%' THEN 'Negative data in Source dataset'&#xA;&#x9;&#x9;&#x9;ELSE 'Others'&#xA;&#x9;&#x9;&#x9; END AS summarized_error_desc&#xA;      ,ldsm.*&#xA;  FROM [transform].[inventory_load_results] ldsm WHERE ldsm.dwnld_info LIKE '%inventory_data_payloads%' and ldsm.errors &lt;&gt; ''&#xA;   ) rs&#xA;GO&#xA;--ISBN Batches that have locations in vista not in the BY Master Locations list.&#xA;DROP TABLE IF EXISTS ReconDB.dbo.inv_location_notsetup_in_blueyonder;&#xA;GO&#xA;SELECT * INTO ReconDB.dbo.inv_location_notsetup_in_blueyonder&#xA;  FROM (&#xA;SELECT DISTINCT *&#xA;  FROM (&#xA;SELECT inv.ISBN_SuppEd&#xA;      ,inv.Location&#xA;&#x9;  ,inv.LocationType&#xA;&#x9;  ,inv.Placement&#xA;&#x9;  ,inv.BaseLuId AS LPN&#xA;&#x9;  ,BYLoc.stoloc&#xA;&#x9;  ,BYLoc.arecod&#xA;  FROM final.inventories inv&#xA;  LEFT JOIN [DM_MoC_NP3].[dbo].[StorageLocExtract_NP1] BYLoc ON inv.Location = BYLoc.stoloc&#xA;  ) ilv WHERE ilv.stoloc IS NULL&#xA;  ) rs;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Populate title recon data"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{0904CDC2-2A03-441C-9574-194BAB316015}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Populate title recon data">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Populate title recon data\Populate title recon data"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{17CBA985-5934-425B-A116-50C6BB3C78CE}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Populate title recon data"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{DA29E0B6-8531-4EA2-A25E-66DEA44DD2EE}"
              SQLTask:SqlStatementSource="--REC102 : Reconcile Titles over Finance Publisher&#xA;DROP TABLE IF EXISTS ReconDB.dbo.rec102_reconcile_stocks_by_finpublisher;&#xA;GO&#xA;SELECT *&#xA;  INTO ReconDB.dbo.rec102_reconcile_stocks_by_finpublisher&#xA;FROM (&#xA;SELECT ilv.*&#xA;      ,CASE WHEN ilv.src_total_units = ilv.by_total_units AND ilv.src_stock_value = ilv.by_stock_value THEN 'Passed' ELSE 'Failed' END as unit_quantity_match_result&#xA;  FROM (&#xA;SELECT titl.finance_publisher AS source_finance_publisher_value&#xA;      ,titl.Publisher AS BY_finance_publisher_value&#xA;&#x9;  ,titl.se_publication_price AS src_unitcost&#xA;&#x9;  ,titl.[Unit Cost] AS BY_unitcost&#xA;&#x9;  ,inv.[Destination Location]&#xA;&#x9;  ,COUNT(1) AS record_count&#xA;&#x9;  ,SUM(inv.UnitQty) AS src_total_units&#xA;&#x9;  ,SUM(CAST(inv.UnitQty AS FLOAT)*CAST(titl.[Unit Cost] AS FLOAT)) AS src_stock_value&#xA;&#x9;  ,SUM(CAST(inv.[Unit Quantity] AS INT)) AS by_total_units&#xA;&#x9;  ,SUM(CAST(inv.[Unit Quantity] AS FLOAT)*CAST(titl.[Unit Cost] AS FLOAT)) AS by_stock_value&#xA;  FROM [ReconDB].[dbo].[reconcile_title_attributes] titl&#xA;  JOIN [ReconDB].[dbo].[reconcile_inventory_attributes] inv ON titl.ISBN_SuppEd = inv.ISBN_SuppEd&#xA;GROUP BY titl.finance_publisher&#xA;        ,titl.Publisher&#xA;&#x9;    ,titl.se_publication_price &#xA;&#x9;    ,titl.[Unit Cost] &#xA;&#x9;&#x9;,inv.[Destination Location]) ilv&#xA;) rs;&#xA;GO&#xA;&#xA;--REC101 : Reconcile Titles over Finance Imprint&#xA;DROP TABLE IF EXISTS ReconDB.dbo.rec101_reconcile_stocks_by_finimprint;&#xA;GO&#xA;SELECT *&#xA;  INTO ReconDB.dbo.rec101_reconcile_stocks_by_finimprint&#xA;FROM (&#xA;SELECT ilv.*&#xA;      ,CASE WHEN ilv.src_total_units = ilv.by_total_units AND ilv.src_stock_value = ilv.by_stock_value THEN 'Passed' ELSE 'Failed' END as unit_quantity_match_result&#xA;  FROM (&#xA;SELECT titl.finance_imprint AS source_finance_imprint_value&#xA;      ,titl.Imprint AS BY_finance_imprint_value&#xA;&#x9;  ,titl.se_publication_price AS src_unitcost&#xA;&#x9;  ,titl.[Unit Cost] AS BY_unitcost&#xA;&#x9;  ,inv.[Destination Location]&#xA;&#x9;  ,COUNT(1) AS record_count&#xA;&#x9;  ,SUM(inv.UnitQty) AS src_total_units&#xA;&#x9;  ,SUM(CAST(inv.UnitQty AS FLOAT)*CAST(titl.[Unit Cost] AS FLOAT)) AS src_stock_value&#xA;&#x9;  ,SUM(CAST(inv.[Unit Quantity] AS INT)) AS by_total_units&#xA;&#x9;  ,SUM(CAST(inv.[Unit Quantity] AS FLOAT)*CAST(titl.[Unit Cost] AS FLOAT)) AS by_stock_value&#xA;  FROM [ReconDB].[dbo].[reconcile_title_attributes] titl&#xA;  JOIN [ReconDB].[dbo].[reconcile_inventory_attributes] inv ON titl.ISBN_SuppEd = inv.ISBN_SuppEd&#xA;GROUP BY titl.finance_imprint&#xA;        ,titl.imprint&#xA;&#x9;    ,titl.se_publication_price &#xA;&#x9;    ,titl.[Unit Cost] &#xA;&#x9;&#x9;,inv.[Destination Location]) ilv&#xA;) rs;&#xA;GO&#xA;&#xA;--REC103 : Reconcile Titles Over Answer Code&#xA;DROP TABLE IF EXISTS ReconDB.dbo.rec103_reconcile_stocks_by_anscode;&#xA;GO&#xA;SELECT *&#xA;  INTO ReconDB.dbo.rec103_reconcile_stocks_by_anscode&#xA;FROM (&#xA;SELECT ilv.*&#xA;      ,CASE WHEN ilv.src_total_units = ilv.by_total_units AND ilv.src_stock_value = ilv.by_stock_value THEN 'Passed' ELSE 'Failed' END as unit_quantity_match_result&#xA;  FROM (&#xA;SELECT titl.answer_code AS source_anscode_value&#xA;      ,titl.Size AS BY_finance_anscode_value&#xA;&#x9;  ,titl.se_publication_price AS src_unitcost&#xA;&#x9;  ,titl.[Unit Cost] AS BY_unitcost&#xA;&#x9;  ,inv.[Destination Location]&#xA;&#x9;  ,COUNT(1) AS record_count&#xA;&#x9;  ,SUM(inv.UnitQty) AS src_total_units&#xA;&#x9;  ,SUM(CAST(inv.UnitQty AS FLOAT)*CAST(titl.[Unit Cost] AS FLOAT)) AS src_stock_value&#xA;&#x9;  ,SUM(CAST(inv.[Unit Quantity] AS INT)) AS by_total_units&#xA;&#x9;  ,SUM(CAST(inv.[Unit Quantity] AS FLOAT)*CAST(titl.[Unit Cost] AS FLOAT)) AS by_stock_value&#xA;  FROM [ReconDB].[dbo].[reconcile_title_attributes] titl&#xA;  JOIN [ReconDB].[dbo].[reconcile_inventory_attributes] inv ON titl.ISBN_SuppEd = inv.ISBN_SuppEd&#xA;GROUP BY titl.answer_code&#xA;        ,titl.Size&#xA;&#x9;    ,titl.se_publication_price &#xA;&#x9;    ,titl.[Unit Cost] &#xA;&#x9;&#x9;,inv.[Destination Location]) ilv&#xA;) rs;&#xA;GO&#xA;&#xA;--REC105 : Number of titles with future publication date&#xA;DROP TABLE IF EXISTS ReconDB.dbo.rec105_titles_future_pubdate;&#xA;GO&#xA;SELECT *&#xA;  INTO ReconDB.dbo.rec105_titles_future_pubdate&#xA;FROM (&#xA;SELECT titl.*&#xA;  FROM [ReconDB].[dbo].[reconcile_title_attributes] titl&#xA; WHERE CONVERT(DATE, titl.se_publication_date, 103) &gt;= Getdate()&#xA; ) rs;&#xA;&#xA;--REC104 : Reconcile Title with Stock in the Warehouse&#xA;DROP TABLE IF EXISTS ReconDB.dbo.rec104_reconcile_titles_stock_warehouse;&#xA;GO&#xA;SELECT *&#xA;  INTO ReconDB.dbo.rec104_reconcile_titles_stock_warehouse&#xA;FROM (&#xA;SELECT ilv.*&#xA;      ,CASE WHEN ilv.src_total_units = ilv.by_total_units AND ilv.src_stock_value = ilv.by_stock_value THEN 'Passed' ELSE 'Failed' END as unit_quantity_match_result&#xA;  FROM (&#xA;SELECT titl.ISBN_SuppEd&#xA;&#x9;  ,titl.se_publication_price AS src_unitcost&#xA;&#x9;  ,titl.[Unit Cost] AS BY_unitcost&#xA;&#x9;  ,inv.[Destination Location]&#xA;&#x9;  ,SUM(inv.UnitQty) AS src_total_units&#xA;&#x9;  ,SUM(CAST(inv.UnitQty AS FLOAT)*CAST(titl.[Unit Cost] AS FLOAT)) AS src_stock_value&#xA;&#x9;  ,SUM(CAST(inv.[Unit Quantity] AS INT)) AS by_total_units&#xA;&#x9;  ,SUM(CAST(inv.[Unit Quantity] AS FLOAT)*CAST(titl.[Unit Cost] AS FLOAT)) AS by_stock_value&#xA;  FROM [ReconDB].[dbo].[reconcile_title_attributes] titl&#xA;  JOIN [ReconDB].[dbo].[reconcile_inventory_attributes] inv ON titl.ISBN_SuppEd = inv.ISBN_SuppEd&#xA;GROUP BY titl.ISBN_SuppEd&#xA;&#x9;    ,titl.se_publication_price &#xA;&#x9;    ,titl.[Unit Cost] &#xA;        ,inv.[Destination Location]) ilv&#xA;) rs;&#xA;GO&#xA;&#xA;&#xA;--REC503 : Stock Frozen in the warehouse on Price Location Level&#xA;DROP TABLE IF EXISTS ReconDB.dbo.rec503_stocks_frozen_in_warehouse;&#xA;GO&#xA;SELECT *&#xA;  INTO ReconDB.dbo.rec503_stocks_frozen_in_warehouse&#xA;FROM (&#xA;SELECT ilv.*&#xA;      ,CASE WHEN ilv.src_total_units = ilv.by_total_units AND ilv.src_stock_value = ilv.by_stock_value THEN 'Passed' ELSE 'Failed' END as unit_quantity_match_result&#xA;  FROM (&#xA;SELECT inv.[Destination Location]&#xA;&#x9;  ,titl.se_publication_price AS src_unitcost&#xA;&#x9;  ,titl.[Unit Cost] AS BY_unitcost&#xA;      ,inv.[Inventory Status] AS src_FrozenCode&#xA;&#x9;  ,inv.InventoryStatus AS by_FrozenCode&#xA;&#x9;  ,SUM(inv.UnitQty) AS src_total_units&#xA;&#x9;  ,SUM(CAST(inv.UnitQty AS FLOAT)*CAST(titl.[Unit Cost] AS FLOAT)) AS src_stock_value&#xA;&#x9;  ,SUM(CAST(inv.[Unit Quantity] AS INT)) AS by_total_units&#xA;&#x9;  ,SUM(CAST(inv.[Unit Quantity] AS FLOAT)*CAST(titl.[Unit Cost] AS FLOAT)) AS by_stock_value&#xA;  FROM [ReconDB].[dbo].[reconcile_title_attributes] titl&#xA;  JOIN [ReconDB].[dbo].[reconcile_inventory_attributes] inv ON titl.ISBN_SuppEd = inv.ISBN_SuppEd&#xA; WHERE inv.[Inventory Status] &lt;&gt; 'A'&#xA;GROUP BY inv.[Destination Location]&#xA;        ,inv.[Inventory Status]&#xA;&#x9;    ,inv.InventoryStatus&#xA;&#x9;    ,titl.se_publication_price &#xA;&#x9;    ,titl.[Unit Cost] ) ilv&#xA;) rs;&#xA;GO&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Populate Vendor recon tables"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{44C3302E-5960-4DA1-B75A-C04D121622CB}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Populate Vendor recon tables">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Populate Vendor recon tables\Populate Vendor Recon Tables"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{FB91BC00-B83B-4AB3-AB62-27D515F9B5FB}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Populate Vendor Recon Tables"
          DTS:ThreadHint="2">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{DA29E0B6-8531-4EA2-A25E-66DEA44DD2EE}"
              SQLTask:SqlStatementSource="USE DM_MoC_NP3&#xA;GO&#xA;DROP TABLE IF EXISTS ReconDB.dbo.reconcile_vendor_attributes;&#xA;GO&#xA;SELECT *&#xA;  INTO ReconDB.dbo.reconcile_vendor_attributes&#xA;  FROM (&#xA;SELECT ilv.*&#xA;,CASE WHEN SupplierNumber_Match = 1 AND HostExternalID_Match = 1 AND CountryName_Match = 1 AND AddressName_Match = 1 AND AddressLine1_Match = 1 AND &#xA;           AddressLine2_Match = 1 AND AddressLine3_Match = 1 AND AddressCity_Match = 1 AND POBoxFlag_Match = 1 AND PostalCode_Match = 1 AND Region_Match = 1 AND&#xA;&#x9;&#x9;   PhoneNumber_Match = 1 THEN 'Passed' ELSE 'Failed' END AS vendor_attributes_match_result&#xA;  FROM (&#xA;SELECT dim.*&#xA;     , CASE WHEN ISNULL(dim.src_supplier_number,'') = ISNULL(dim.[Supplier Number],'') THEN 1 ELSE 0 END AS SupplierNumber_Match&#xA;&#x9; , CASE WHEN ISNULL(dim.src_bindercode,'') = ISNULL(dim.[Host External ID],'') THEN 1 ELSE 0 END AS HostExternalID_Match&#xA;&#x9; , CASE WHEN ISNULL(dim.src_ctryname,'') = ISNULL(dim.[Country Name],'') THEN 1 ELSE 0 END AS CountryName_Match&#xA;&#x9; , CASE WHEN ISNULL(dim.src_adrnam,'') = ISNULL(dim.[Address Name],'') THEN 1 ELSE 0 END AS AddressName_Match&#xA;&#x9; , CASE WHEN dim.src_adrln1 = ISNULL(dim.[Address Line 1],'') THEN 1 ELSE 0 END AS AddressLine1_Match&#xA;&#x9; , CASE WHEN dim.src_adrln2 = ISNULL(dim.[Address Line 2],'') THEN 1 ELSE 0 END AS AddressLine2_Match&#xA;&#x9; , CASE WHEN dim.src_adrln3 = ISNULL(dim.[Address Line 3],'') THEN 1 ELSE 0 END AS AddressLine3_Match&#xA;&#x9; , CASE WHEN dim.src_adrcty = ISNULL(dim.City,'') THEN 1 ELSE 0 END AS AddressCity_Match&#xA;&#x9; , CASE WHEN CAST(dim.src_poboxflg AS BIT) = dim.[P O  Box Address] THEN 1 ELSE 0 END AS POBoxFlag_Match&#xA;&#x9; , CASE WHEN ISNULL(dim.src_adrpsz,'') = ISNULL(dim.[Postal Code],'') THEN 1 ELSE 0 END AS PostalCode_Match&#xA;&#x9; , CASE WHEN ISNULL(dim.src_rgncode,'') = ISNULL(dim.Region,'') THEN 1 ELSE 0 END AS Region_Match&#xA;&#x9; , CASE WHEN ISNULL(dim.src_phnnum,'') = ISNULL(dim.[Receiving Phone],'') THEN 1 ELSE 0 END AS PhoneNumber_Match&#xA;  FROM (&#xA;SELECT vend.[run_id]&#xA;      --,vend.[record_number]&#xA;      --,vend.[Created On]&#xA;      --,vend.[Plant]&#xA;      ,vend.[Vendor] AS src_supplier_number&#xA;      ,vend.[Purch  Organization]&#xA;      ,vend.[Binder Code] AS hostextid&#xA;      ,vend.[Binder Code] AS src_bindercode&#xA;      ,vend.[Country Key] as src_ctryname&#xA;      ,ISNULL(vend.[name1],'') AS src_adrnam&#xA;      ,vend.[name2] &#xA;      ,vend.[Street and House No ]&#xA;&#x9;  ,CASE WHEN LTRIM(RTRIM(ISNULL(vend.name2,''))) &lt;&gt; '' THEN LTRIM(RTRIM(ISNULL(vend.name2,''))) + ',' + LTRIM(RTRIM(ISNULL(vend.[Street and House No ],''))) ELSE LTRIM(RTRIM(ISNULL(vend.[Street and House No ],''))) END AS src_adrln1&#xA;      ,ISNULL(vend.[name3],'') AS src_adrln2&#xA;      ,ISNULL(vend.[name4],'') AS src_adrln3&#xA;      ,ISNULL(vend.[City],'') AS src_adrcty&#xA;      ,vend.[PO Box]&#xA;      ,CASE WHEN LTRIM(RTRIM(ISNULL(vend.[PO Box],''))) IS NOT NULL AND LTRIM(RTRIM(ISNULL(vend.[PO Box],''))) &lt;&gt; '' THEN 1 ELSE 0 END AS src_poboxflg&#xA;      ,ISNULL(vend.[P O  Box Postal Code],'') AS [P O  Box Postal Code]&#xA;      ,ISNULL(vend.[Postal Code],'') AS src_adrpsz&#xA;      ,ISNULL(vend.[Region],'') AS src_rgncode&#xA;      --,vend.[Search term]&#xA;      --,vend.[Account Group]&#xA;      --,vend.[Customer]&#xA;      --,vend.[Language Key]&#xA;      ,ISNULL(vend.[Telephone 1],'') AS src_phnnum&#xA;      --,vend.[VAT Registration No ]&#xA;      --,vend.[Sort key]&#xA;      --,vend.[Reconciliation acct]&#xA;      --,vend.[Payment methods]&#xA;      --,vend.[Terms of Payment]&#xA;      --,vend.[Previous account no ]&#xA;      --,vend.[Credit memo pyt term]&#xA;      --,vend.[Order currency]&#xA;      --,vend.[main_tag_starter]&#xA;      --,vend.[by_payload_filler]&#xA;      --,vend.[resultant_payload]&#xA;      --,vend.[main_tag_finisher]&#xA;      --,ldsm.[Receive Status]&#xA;      ,ldsm.[Supplier Number]&#xA;      ,ldsm.[Host External ID]&#xA;      ,ldsm.[Address Name]&#xA;      ,ldsm.[Address Type]&#xA;      ,ldsm.[Address Line 1]&#xA;      ,ldsm.[Address Line 2]&#xA;      ,ldsm.[Address Line 3]&#xA;      ,ldsm.[City]&#xA;      ,ldsm.[State]&#xA;      ,ldsm.[Postal Code]&#xA;      ,ldsm.[Country Name]&#xA;      ,ldsm.[Region]&#xA;      ,ldsm.[Receiving Phone]&#xA;      --,ldsm.[Receiving Fax]&#xA;      --,ldsm.[Residential Address]&#xA;      --,ldsm.[Temporary]&#xA;      --,ldsm.[Last Name]&#xA;      --,ldsm.[First Name]&#xA;      --,ldsm.[Honorific]&#xA;      --,ldsm.[Address District]&#xA;      --,ldsm.[Receiving Web Address]&#xA;      --,ldsm.[Receiving Email]&#xA;      --,ldsm.[pagnum]&#xA;      --,ldsm.[Locale ID]&#xA;      ,ldsm.[P O  Box Address]&#xA;      --,ldsm.[Handling Unit Type]&#xA;      --,ldsm.[Lot Format ID]&#xA;      --,ldsm.[Serial Number Type ID]&#xA;      --,ldsm.[autorcv_flg]&#xA;      --,ldsm.[Trusted]&#xA;      --,ldsm.[event_supnum]&#xA;      --,ldsm.[errors]&#xA;      ,ldsm.[dwnld_info]&#xA;      --,ldsm.[Event Data Sequence]&#xA;      --,ldsm.[Event Status]&#xA;      --,ldsm.[EO Data Sequence]&#xA;      --,ldsm.[EO Data Detail Sequence]&#xA;      --,ldsm.[parent]&#xA;      --,ldsm.[EO Segment]&#xA;      --,ldsm.[EO Field]&#xA;      --,ldsm.[Data Type]&#xA;      --,ldsm.[Value]&#xA;      --,ldsm.[ol_flg]&#xA;      --,ldsm.[return_as_projection]&#xA;      --,ldsm.[Download Sequence]&#xA;      --,ldsm.[Inserted Date]&#xA;      --,ldsm.[Last Updated Date]&#xA;      ,ldsm.[evt_dt]&#xA;      --,CASE WHEN ldsm.[Event Status] = 'SC' THEN 'SUCCESS' ELSE 'ERROR' END AS bydata_load_status&#xA;  FROM [transform].[vendor_load_results] ldsm&#xA;  JOIN [final].[vendors] vend ON ldsm.event_supnum = vend.[Vendor]&#xA;   --WHERE ldsm.dwnld_info LIKE '%vendor_data_payloads%'&#xA; ) dim&#xA; ) ilv ) rs;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="237.333333333334,42.6666666666667"
          Id="Package\Populate inventory recon tables\Populate Inventory Recon Tables"
          TopLeft="16.666665027539,37.4912301436246" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="258.666666666667,133.333333333334"
          Size="258.666666666667,176"
          Id="Package\Populate inventory recon tables"
          TopLeft="93.1249986123294,30.1052637245516" />
        <NodeLayout
          Size="194.666666666667,42.6666666666667"
          Id="Package\Populate title recon data\Populate title recon data"
          TopLeft="16.5833313775559,17.5087789100073" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="226.666666666667,112.666666666667"
          Size="226.666666666667,155.333333333334"
          Id="Package\Populate title recon data"
          TopLeft="837.499987520278,34.2105269597177" />
        <NodeLayout
          Size="228,42.6666666666667"
          Id="Package\Populate Vendor recon tables\Populate Vendor Recon Tables"
          TopLeft="14.4999895319345,25.8947387223759" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="251.333333333334,124"
          Size="251.333333333334,166.666666666667"
          Id="Package\Populate Vendor recon tables"
          TopLeft="471.124993061646,35.6052637245516" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>